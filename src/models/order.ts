/**
 * eCom Checkout API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { BasketId } from './basketId';
import { BillingAddress } from './billingAddress';
import { Coupon } from './coupon';
import { Discount } from './discount';
import { LineItemContainerPricing } from './lineItemContainerPricing';
import { Message } from './message';
import { OrderStatus } from './orderStatus';
import { PaymentInstrument } from './paymentInstrument';
import { PickupPoint } from './pickupPoint';
import { Shipment } from './shipment';
import { ShippingAddress } from './shippingAddress';


export interface Order { 
    /**
     * The unique identifier for the order.
     */
    orderId: string;
    /**
     * The token for the order used for order tracking page url.
     */
    orderToken?: string;
    /**
     * The resource_state represents the server side state of specific resource. To use the resource state for optimistic locking you have to include the resource state from the last server response in your next state changing (DELETE, PATCH, POST, PUT) request. You should always prefer to use the _resource_state property in the body. In case the requested API doesn't have a body use the x-dw-resource-state header. Whenever a resource state is part of a client's request, OCAPI verifies it by comparing the given value with the server resource state. If both resource states are equal the operation is executed, otherwise an HTTP 409 ResourceStateConflictException fault is returned. In case of a create request (e.g. with PUT) where the resource is not expected to be existing (with not_exists state), the returned fault is an HTTP 409 ResourceAlreadyExistsException instead.
     */
    resourceState: string;
    /**
     * The taxation policy used for the basket. It will determine if the prices in the basket are net or gross
     */
    taxationPolicy: Order.TaxationPolicyEnum;
    /**
     * The date-time of Order creation
     */
    creationDate: Date;
    paymentStatus?: Order.PaymentStatusEnum;
    /**
     * Status of an order
     */
    status?: OrderStatus;
    /**
     * Currency information of price like EUR
     */
    currency: string;
    /**
     * It's a collection of shipment.
     */
    shipmentList: Array<Shipment>;
    /**
     * The billing address. This property is part of basket checkout information only.
     */
    billingAddress: BillingAddress;
    /**
     * The shipping address. Basket can have one shipping addresses where products can be dispatched to.
     */
    shippingAddress: ShippingAddress;
    /**
     * Pickup point information if a pickup point is set.
     */
    pickupPoint?: PickupPoint;
    /**
     * The line item container pricing information
     */
    pricing: LineItemContainerPricing;
    /**
     * The collection of discount. Basket can have multiple discount.
     */
    discountList?: Array<Discount>;
    /**
     * The collection of coupon. It contains of any product, shipping or order releated coupon.
     */
    couponList?: Array<Coupon>;
    /**
     * The collection of payment instruments
     */
    paymentInstrumentList?: Array<PaymentInstrument>;
    /**
     * Formatted payment failure code
     */
    paymentFailureCode?: string;
    messageList?: Array<Message>;
    /**
     * Customer related information
     */
    customer?: any;
    /**
     * Customer purchases info (repeat, reactivated or a new customer)
     */
    customerOrderHistoryStatus?: number;
    /**
     * The reference to the basket id used to create this order
     */
    basketReference?: BasketId;
    /**
     * true when tax calculation is missing, traditionally happens when the address is wrong.
     */
    taxCalculationMissing?: boolean;
    /**
     * Base URL for collecting network promoter score from user
     */
    npsSurveyURL?: string;
}
export namespace Order {
    export type TaxationPolicyEnum = 'net' | 'gross';
    export const TaxationPolicyEnum = {
        Net: 'net' as TaxationPolicyEnum,
        Gross: 'gross' as TaxationPolicyEnum
    }
    export type PaymentStatusEnum = 'not_paid' | 'part_paid' | 'paid';
    export const PaymentStatusEnum = {
        NotPaid: 'not_paid' as PaymentStatusEnum,
        PartPaid: 'part_paid' as PaymentStatusEnum,
        Paid: 'paid' as PaymentStatusEnum
    }
}
