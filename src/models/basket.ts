/**
 * eCom Checkout API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AddressValidationResult } from './addressValidationResult';
import { BasketId } from './basketId';
import { BasketTaxBreakDown } from './basketTaxBreakDown';
import { BillingAddress } from './billingAddress';
import { Coupon } from './coupon';
import { Discount } from './discount';
import { LineItemContainerPricing } from './lineItemContainerPricing';
import { Message } from './message';
import { PaymentInstrument } from './paymentInstrument';
import { PickupPoint } from './pickupPoint';
import { Shipment } from './shipment';
import { ShippingAddress } from './shippingAddress';
import { TaxBreakdown } from './taxBreakdown';


export interface Basket { 
    /**
     * It represents  date-time of Basket creation
     */
    creationDate?: Date;
    /**
     * It represent last update date-time of Basket
     */
    modifiedDate: Date;
    /**
     * Customer related information
     */
    customer?: any;
    /**
     * It shows total product count in basket
     */
    totalProductCount: number;
    /**
     * The unique identifier for the basket.
     */
    basketId: BasketId;
    /**
     * The resource_state represents the server side state of specific resource. To use the resource state for optimistic locking you have to include the resource state from the last server response in your next state changing (DELETE, PATCH, POST, PUT) request. You should always prefer to use the _resource_state property in the body. In case the requested API doesn't have a body use the x-dw-resource-state header. Whenever a resource state is part of a client's request, OCAPI verifies it by comparing the given value with the server resource state. If both resource states are equal the operation is executed, otherwise an HTTP 409 ResourceStateConflictException fault is returned. In case of a create request (e.g. with PUT) where the resource is not expected to be existing (with not_exists state), the returned fault is an HTTP 409 ResourceAlreadyExistsException instead.
     */
    resourceState: string;
    /**
     * The taxation policy used for the basket. It will determine if the prices in the basket are net or gross
     */
    taxationPolicy: Basket.TaxationPolicyEnum;
    /**
     * Currency information of price like EUR
     */
    currency: string;
    /**
     * It's a collection of shipment.
     */
    shipmentList?: Array<Shipment>;
    /**
     * The billing address. This property is part of basket checkout information only.
     */
    billingAddress?: BillingAddress;
    /**
     * Pickup point information if a pickup point is set.
     */
    pickupPoint?: PickupPoint;
    /**
     * The collection of shipping address. Basket can have one shipping addresses where products can be dispatched to.
     */
    shippingAddress?: ShippingAddress;
    /**
     * Address validation result based on the response from validation service
     */
    shippingAddressValidation?: AddressValidationResult;
    /**
     * The line item container pricing information
     */
    pricing: LineItemContainerPricing;
    /**
     * The collection of discount. Basket can have multiple discount.
     */
    discountList?: Array<Discount>;
    /**
     * The collection of coupon. It contains of any product, shipping or order releated coupon.
     */
    couponList?: Array<Coupon>;
    /**
     * The collection of payment instruments
     */
    paymentInstrumentList?: Array<PaymentInstrument>;
    taxBreakDown?: BasketTaxBreakDown;
    /**
     * The collection of Tax Breakdown field. It's used in CA market
     */
    taxBreakdownList?: Array<TaxBreakdown>;
    messageList?: Array<Message>;
    /**
     * The checkout id associated with this basket for payment-related operations
     */
    checkoutId?: string;
    /**
     * The time left, in milliseconds, since the most recently added flash product was reserved
     */
    flashTimeLeft?: number;
    /**
     * true when tax calculation is missing, traditionally happens when the address is wrong.
     */
    taxCalculationMissing?: boolean;
    /**
     * string used to deliver information about ongoing AB tests.
     */
    segmentationId?: string;
}
export namespace Basket {
    export type TaxationPolicyEnum = 'net' | 'gross';
    export const TaxationPolicyEnum = {
        Net: 'net' as TaxationPolicyEnum,
        Gross: 'gross' as TaxationPolicyEnum
    }
}
